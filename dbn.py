from pgmpy.models import DynamicBayesianNetwork as DBN
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import DBNInference
import sys
import os

time_querying = sys.argv[1]
action_id = sys.argv[2]

# Construct a DBN object
dbn = DBN()

# Create the edges for this 2-TBN (two time slice bayesian network)
# For edges in the same time slice, you only need to provide their connections in the first slice
dbn.add_edges_from([(('goal', 0),('action', 0)),(('state', 0),('action', 0)),(('goal', 0),('goal', 1))])

# Create the CPD (Conditional Probability Distribution) tables
# First, create the CPD tables for edges in the same time slice
goal_cpd = TabularCPD(('goal', 0), 4, [[0.25, 0.25, 0.25, 0.25]])
state_cpd = TabularCPD(('state', 0), 100, [[0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01]])


# 6-8 near goal

# action0 - up
# action1 - left
# action2 - down
# action3 - right
action_cpd = TabularCPD(('action', 0), 4, [[0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.35,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.35,0.55,0.55,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35], #up
                                           [0.15,0.15,0.15,0.35,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.15,0.15,0.15,0.15,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.15,0.15,0.15,0.15,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.15,0.15,0.15,0.15,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.15,0.15,0.35,0.15,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.15,0.35,0.15,0.15,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.15,0.15,0.15,0.15,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.15,0.15,0.15,0.15,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.15,0.15,0.15,0.15,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.15,0.15,0.15,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35,0.55,0.35,0.35,0.35], #left
                                           [0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.55,0.55,0.55,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.35,0.35,0.35,0.15,0.55,0.55,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.35,0.35,0.15,0.15,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.55,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.35,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15], #down
                                           [0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15]],#right
                        evidence=[('state', 0),('goal', 0)],
                        evidence_card=[100, 4])


# goal0 - left corner
# goal1 - left post
# goal2 - right post
# goal3 - right corner
goal_i_cpd = TabularCPD(('goal',1), 4, [[1, 0, 0, 0],
                                        [0, 1, 0, 0],
                                        [0, 0, 1, 0],
                                        [0, 0, 0, 1]],
                     evidence=[('goal',0)],
                      evidence_card=[4])

# Add the CPD tables into the DBN
dbn.add_cpds(goal_cpd, state_cpd, action_cpd, goal_i_cpd)


# Do NOT forget to initialize before doing any inference! Otherwise, errors will be introduced.
dbn.initialize_initial_state()

# Create an inference object
dbn_inf = DBNInference(dbn)


# Perform inference on the DBN.
result = dbn_inf.query(variables=[('goal',int(time_querying))], evidence={('action', int(time_querying)): int(action_id)})[('goal',int(time_querying))].values
# out = str(result[0]) + "," + str(result[1]) + "," + str(result[2]) + "," + str(result[3])

largest = 0
largest_val = result[0]

if result[1] > largest_val:
	largest = 1
	largest_val = result[1]

if result[2] > largest_val:
	largest = 2
	largest_val = result[2]

if result[3] > largest_val:
	largest = 3
	largest_val = result[3]

# print str(largest) + "," + str(largest_val)
with open('/home/ryan/591/hw3/defender.soln', 'w') as file:
  file.write(str(largest) + "," + str(largest_val))
  file.close()
  os.remove("/home/ryan/utaustinvilla3d/defend.lock")